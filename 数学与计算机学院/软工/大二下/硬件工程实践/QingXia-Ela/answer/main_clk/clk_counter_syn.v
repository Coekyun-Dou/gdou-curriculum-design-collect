// megafunction wizard: %LPM_COUNTER%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: lpm_counter 

// ============================================================
// File Name: clk_counter.v
// Megafunction Name(s):
// 			lpm_counter
//
// Simulation Library Files(s):
// 			lpm
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 9.1 Build 350 03/24/2010 SP 2 SJ Web Edition
// ************************************************************


//Copyright (C) 1991-2010 Altera Corporation
//Your use of Altera Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Altera Program License 
//Subscription Agreement, Altera MegaCore Function License 
//Agreement, or other applicable license agreement, including, 
//without limitation, that your use is for the sole purpose of 
//programming logic devices manufactured by Altera and sold by 
//Altera or its authorized distributors.  Please refer to the 
//applicable agreement for further details.


//lpm_counter DEVICE_FAMILY="Cyclone II" lpm_direction="UP" lpm_modulus=25000000 lpm_port_updown="PORT_UNUSED" lpm_width=31 clk_en clock q sclr
//VERSION_BEGIN 9.1SP2 cbx_cycloneii 2010:03:24:20:43:43:SJ cbx_lpm_add_sub 2010:03:24:20:43:43:SJ cbx_lpm_compare 2010:03:24:20:43:43:SJ cbx_lpm_counter 2010:03:24:20:43:43:SJ cbx_lpm_decode 2010:03:24:20:43:43:SJ cbx_mgl 2010:03:24:21:01:05:SJ cbx_stratix 2010:03:24:20:43:43:SJ cbx_stratixii 2010:03:24:20:43:43:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



//lpm_compare DEVICE_FAMILY="Cyclone II" LPM_WIDTH=31 ONE_INPUT_IS_CONSTANT="YES" aeb dataa datab
//VERSION_BEGIN 9.1SP2 cbx_cycloneii 2010:03:24:20:43:43:SJ cbx_lpm_add_sub 2010:03:24:20:43:43:SJ cbx_lpm_compare 2010:03:24:20:43:43:SJ cbx_mgl 2010:03:24:21:01:05:SJ cbx_stratix 2010:03:24:20:43:43:SJ cbx_stratixii 2010:03:24:20:43:43:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  clk_counter_cmpr
	( 
	aeb,
	dataa,
	datab) /* synthesis synthesis_clearbox=1 */;
	output   aeb;
	input   [30:0]  dataa;
	input   [30:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   [30:0]  dataa;
	tri0   [30:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [0:0]  aeb_result_wire;
	wire  [0:0]  aneb_result_wire;
	wire  [81:0]  data_wire;
	wire  eq_wire;

	assign
		aeb = eq_wire,
		aeb_result_wire = (~ aneb_result_wire),
		aneb_result_wire = (((data_wire[0] | data_wire[1]) | data_wire[2]) | data_wire[3]),
		data_wire = {datab[30], dataa[30], datab[29], dataa[29], datab[28], dataa[28], datab[27], dataa[27], datab[26], dataa[26], datab[25], dataa[25], datab[24], dataa[24], datab[23], dataa[23], datab[22], dataa[22], datab[21], dataa[21], datab[20], dataa[20], datab[19], dataa[19], datab[18], dataa[18], datab[17], dataa[17], datab[16], dataa[16], datab[15], dataa[15], datab[14], dataa[14], datab[13], dataa[13], datab[12], dataa[12], datab[11], dataa[11], datab[10], dataa[10], datab[9], dataa[9], datab[8], dataa[8], datab[7], dataa[7], datab[6], dataa[6], datab[5], dataa[5], datab[4], dataa[4], datab[3], dataa[3], datab[2], dataa[2], datab[1], dataa[1], datab[0], dataa[0], (data_wire[80] ^ data_wire[81]), ((data_wire[76] ^ data_wire[77]) | (data_wire[78] ^ data_wire[79])), ((data_wire[72] ^ data_wire[73]) | (data_wire[74] ^ data_wire[75])), ((data_wire[68] ^ data_wire[69]) | (data_wire[70] ^ data_wire[71])), ((data_wire[64] ^ data_wire[65]) | (data_wire[66] ^ data_wire[67])), ((data_wire[60] ^ data_wire[61]) | (data_wire[62] ^ data_wire[63])), ((data_wire[56] ^ data_wire[57]) | (data_wire[58] ^ data_wire[59])), ((data_wire[52] ^ data_wire[53]) | (data_wire[54] ^ data_wire[55])), ((data_wire[48] ^ data_wire[49]) | (data_wire[50] ^ data_wire[51])), ((data_wire[44] ^ data_wire[45]) | (data_wire[46] ^ data_wire[47])), ((data_wire[40] ^ data_wire[41]) | (data_wire[42] ^ data_wire[43])), ((data_wire[36] ^ data_wire[37]) | (data_wire[38] ^ data_wire[39])), ((data_wire[32] ^ data_wire[33]) | (data_wire[34] ^ data_wire[35])), ((data_wire[28] ^ data_wire[29]) | (data_wire[30] ^ data_wire[31])), ((data_wire[24] ^ data_wire[25]) | (data_wire[26] ^ data_wire[27])), ((data_wire[20] ^ data_wire[21]) | (data_wire[22] ^ data_wire[23])), ((data_wire[16] | data_wire[17]) | (data_wire[18] | data_wire[19])), (((data_wire[12] | data_wire[13]) | data_wire[14]) | data_wire[15]), (((data_wire[8] | data_wire[9]) | data_wire[10]) | data_wire[11]), (((data_wire[4] | data_wire[5]) | data_wire[6]) | data_wire[7])},
		eq_wire = aeb_result_wire;
endmodule //clk_counter_cmpr

//synthesis_resources = lut 31 reg 31 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  clk_counter_cntr
	( 
	clk_en,
	clock,
	q,
	sclr) /* synthesis synthesis_clearbox=1 */;
	input   clk_en;
	input   clock;
	output   [30:0]  q;
	input   sclr;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri1   clk_en;
	tri0   sclr;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [0:0]   wire_counter_comb_bita_0combout;
	wire  [0:0]   wire_counter_comb_bita_1combout;
	wire  [0:0]   wire_counter_comb_bita_2combout;
	wire  [0:0]   wire_counter_comb_bita_3combout;
	wire  [0:0]   wire_counter_comb_bita_4combout;
	wire  [0:0]   wire_counter_comb_bita_5combout;
	wire  [0:0]   wire_counter_comb_bita_6combout;
	wire  [0:0]   wire_counter_comb_bita_7combout;
	wire  [0:0]   wire_counter_comb_bita_8combout;
	wire  [0:0]   wire_counter_comb_bita_9combout;
	wire  [0:0]   wire_counter_comb_bita_10combout;
	wire  [0:0]   wire_counter_comb_bita_11combout;
	wire  [0:0]   wire_counter_comb_bita_12combout;
	wire  [0:0]   wire_counter_comb_bita_13combout;
	wire  [0:0]   wire_counter_comb_bita_14combout;
	wire  [0:0]   wire_counter_comb_bita_15combout;
	wire  [0:0]   wire_counter_comb_bita_16combout;
	wire  [0:0]   wire_counter_comb_bita_17combout;
	wire  [0:0]   wire_counter_comb_bita_18combout;
	wire  [0:0]   wire_counter_comb_bita_19combout;
	wire  [0:0]   wire_counter_comb_bita_20combout;
	wire  [0:0]   wire_counter_comb_bita_21combout;
	wire  [0:0]   wire_counter_comb_bita_22combout;
	wire  [0:0]   wire_counter_comb_bita_23combout;
	wire  [0:0]   wire_counter_comb_bita_24combout;
	wire  [0:0]   wire_counter_comb_bita_25combout;
	wire  [0:0]   wire_counter_comb_bita_26combout;
	wire  [0:0]   wire_counter_comb_bita_27combout;
	wire  [0:0]   wire_counter_comb_bita_28combout;
	wire  [0:0]   wire_counter_comb_bita_29combout;
	wire  [0:0]   wire_counter_comb_bita_30combout;
	wire  [0:0]   wire_counter_comb_bita_0cout;
	wire  [0:0]   wire_counter_comb_bita_1cout;
	wire  [0:0]   wire_counter_comb_bita_2cout;
	wire  [0:0]   wire_counter_comb_bita_3cout;
	wire  [0:0]   wire_counter_comb_bita_4cout;
	wire  [0:0]   wire_counter_comb_bita_5cout;
	wire  [0:0]   wire_counter_comb_bita_6cout;
	wire  [0:0]   wire_counter_comb_bita_7cout;
	wire  [0:0]   wire_counter_comb_bita_8cout;
	wire  [0:0]   wire_counter_comb_bita_9cout;
	wire  [0:0]   wire_counter_comb_bita_10cout;
	wire  [0:0]   wire_counter_comb_bita_11cout;
	wire  [0:0]   wire_counter_comb_bita_12cout;
	wire  [0:0]   wire_counter_comb_bita_13cout;
	wire  [0:0]   wire_counter_comb_bita_14cout;
	wire  [0:0]   wire_counter_comb_bita_15cout;
	wire  [0:0]   wire_counter_comb_bita_16cout;
	wire  [0:0]   wire_counter_comb_bita_17cout;
	wire  [0:0]   wire_counter_comb_bita_18cout;
	wire  [0:0]   wire_counter_comb_bita_19cout;
	wire  [0:0]   wire_counter_comb_bita_20cout;
	wire  [0:0]   wire_counter_comb_bita_21cout;
	wire  [0:0]   wire_counter_comb_bita_22cout;
	wire  [0:0]   wire_counter_comb_bita_23cout;
	wire  [0:0]   wire_counter_comb_bita_24cout;
	wire  [0:0]   wire_counter_comb_bita_25cout;
	wire  [0:0]   wire_counter_comb_bita_26cout;
	wire  [0:0]   wire_counter_comb_bita_27cout;
	wire  [0:0]   wire_counter_comb_bita_28cout;
	wire  [0:0]   wire_counter_comb_bita_29cout;
	wire  [0:0]   wire_counter_comb_bita_30cout;
	wire  [30:0]   wire_counter_reg_bit1a_regout;
	wire  [30:0]   wire_counter_reg_bit1a_sdata;
	wire  wire_cmpr2_aeb;
	wire  aclr_actual;
	wire cnt_en;
	wire  compare_result;
	wire  cout_actual;
	wire [30:0]  data;
	wire  external_cin;
	wire  [30:0]  modulus_bus;
	wire  modulus_trigger;
	wire  [30:0]  s_val;
	wire  [30:0]  safe_q;
	wire sload;
	wire sset;
	wire  time_to_clear;
	wire  updown_dir;

	cycloneii_lcell_comb   counter_comb_bita_0
	( 
	.cin(external_cin),
	.combout(wire_counter_comb_bita_0combout[0:0]),
	.cout(wire_counter_comb_bita_0cout[0:0]),
	.dataa(wire_counter_reg_bit1a_regout[0:0]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_0.lut_mask = 16'h5A90,
		counter_comb_bita_0.sum_lutc_input = "cin",
		counter_comb_bita_0.lpm_type = "cycloneii_lcell_comb";
	cycloneii_lcell_comb   counter_comb_bita_1
	( 
	.cin(wire_counter_comb_bita_0cout[0:0]),
	.combout(wire_counter_comb_bita_1combout[0:0]),
	.cout(wire_counter_comb_bita_1cout[0:0]),
	.dataa(wire_counter_reg_bit1a_regout[1:1]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_1.lut_mask = 16'h5A90,
		counter_comb_bita_1.sum_lutc_input = "cin",
		counter_comb_bita_1.lpm_type = "cycloneii_lcell_comb";
	cycloneii_lcell_comb   counter_comb_bita_2
	( 
	.cin(wire_counter_comb_bita_1cout[0:0]),
	.combout(wire_counter_comb_bita_2combout[0:0]),
	.cout(wire_counter_comb_bita_2cout[0:0]),
	.dataa(wire_counter_reg_bit1a_regout[2:2]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_2.lut_mask = 16'h5A90,
		counter_comb_bita_2.sum_lutc_input = "cin",
		counter_comb_bita_2.lpm_type = "cycloneii_lcell_comb";
	cycloneii_lcell_comb   counter_comb_bita_3
	( 
	.cin(wire_counter_comb_bita_2cout[0:0]),
	.combout(wire_counter_comb_bita_3combout[0:0]),
	.cout(wire_counter_comb_bita_3cout[0:0]),
	.dataa(wire_counter_reg_bit1a_regout[3:3]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_3.lut_mask = 16'h5A90,
		counter_comb_bita_3.sum_lutc_input = "cin",
		counter_comb_bita_3.lpm_type = "cycloneii_lcell_comb";
	cycloneii_lcell_comb   counter_comb_bita_4
	( 
	.cin(wire_counter_comb_bita_3cout[0:0]),
	.combout(wire_counter_comb_bita_4combout[0:0]),
	.cout(wire_counter_comb_bita_4cout[0:0]),
	.dataa(wire_counter_reg_bit1a_regout[4:4]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_4.lut_mask = 16'h5A90,
		counter_comb_bita_4.sum_lutc_input = "cin",
		counter_comb_bita_4.lpm_type = "cycloneii_lcell_comb";
	cycloneii_lcell_comb   counter_comb_bita_5
	( 
	.cin(wire_counter_comb_bita_4cout[0:0]),
	.combout(wire_counter_comb_bita_5combout[0:0]),
	.cout(wire_counter_comb_bita_5cout[0:0]),
	.dataa(wire_counter_reg_bit1a_regout[5:5]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_5.lut_mask = 16'h5A90,
		counter_comb_bita_5.sum_lutc_input = "cin",
		counter_comb_bita_5.lpm_type = "cycloneii_lcell_comb";
	cycloneii_lcell_comb   counter_comb_bita_6
	( 
	.cin(wire_counter_comb_bita_5cout[0:0]),
	.combout(wire_counter_comb_bita_6combout[0:0]),
	.cout(wire_counter_comb_bita_6cout[0:0]),
	.dataa(wire_counter_reg_bit1a_regout[6:6]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_6.lut_mask = 16'h5A90,
		counter_comb_bita_6.sum_lutc_input = "cin",
		counter_comb_bita_6.lpm_type = "cycloneii_lcell_comb";
	cycloneii_lcell_comb   counter_comb_bita_7
	( 
	.cin(wire_counter_comb_bita_6cout[0:0]),
	.combout(wire_counter_comb_bita_7combout[0:0]),
	.cout(wire_counter_comb_bita_7cout[0:0]),
	.dataa(wire_counter_reg_bit1a_regout[7:7]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_7.lut_mask = 16'h5A90,
		counter_comb_bita_7.sum_lutc_input = "cin",
		counter_comb_bita_7.lpm_type = "cycloneii_lcell_comb";
	cycloneii_lcell_comb   counter_comb_bita_8
	( 
	.cin(wire_counter_comb_bita_7cout[0:0]),
	.combout(wire_counter_comb_bita_8combout[0:0]),
	.cout(wire_counter_comb_bita_8cout[0:0]),
	.dataa(wire_counter_reg_bit1a_regout[8:8]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_8.lut_mask = 16'h5A90,
		counter_comb_bita_8.sum_lutc_input = "cin",
		counter_comb_bita_8.lpm_type = "cycloneii_lcell_comb";
	cycloneii_lcell_comb   counter_comb_bita_9
	( 
	.cin(wire_counter_comb_bita_8cout[0:0]),
	.combout(wire_counter_comb_bita_9combout[0:0]),
	.cout(wire_counter_comb_bita_9cout[0:0]),
	.dataa(wire_counter_reg_bit1a_regout[9:9]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_9.lut_mask = 16'h5A90,
		counter_comb_bita_9.sum_lutc_input = "cin",
		counter_comb_bita_9.lpm_type = "cycloneii_lcell_comb";
	cycloneii_lcell_comb   counter_comb_bita_10
	( 
	.cin(wire_counter_comb_bita_9cout[0:0]),
	.combout(wire_counter_comb_bita_10combout[0:0]),
	.cout(wire_counter_comb_bita_10cout[0:0]),
	.dataa(wire_counter_reg_bit1a_regout[10:10]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_10.lut_mask = 16'h5A90,
		counter_comb_bita_10.sum_lutc_input = "cin",
		counter_comb_bita_10.lpm_type = "cycloneii_lcell_comb";
	cycloneii_lcell_comb   counter_comb_bita_11
	( 
	.cin(wire_counter_comb_bita_10cout[0:0]),
	.combout(wire_counter_comb_bita_11combout[0:0]),
	.cout(wire_counter_comb_bita_11cout[0:0]),
	.dataa(wire_counter_reg_bit1a_regout[11:11]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_11.lut_mask = 16'h5A90,
		counter_comb_bita_11.sum_lutc_input = "cin",
		counter_comb_bita_11.lpm_type = "cycloneii_lcell_comb";
	cycloneii_lcell_comb   counter_comb_bita_12
	( 
	.cin(wire_counter_comb_bita_11cout[0:0]),
	.combout(wire_counter_comb_bita_12combout[0:0]),
	.cout(wire_counter_comb_bita_12cout[0:0]),
	.dataa(wire_counter_reg_bit1a_regout[12:12]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_12.lut_mask = 16'h5A90,
		counter_comb_bita_12.sum_lutc_input = "cin",
		counter_comb_bita_12.lpm_type = "cycloneii_lcell_comb";
	cycloneii_lcell_comb   counter_comb_bita_13
	( 
	.cin(wire_counter_comb_bita_12cout[0:0]),
	.combout(wire_counter_comb_bita_13combout[0:0]),
	.cout(wire_counter_comb_bita_13cout[0:0]),
	.dataa(wire_counter_reg_bit1a_regout[13:13]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_13.lut_mask = 16'h5A90,
		counter_comb_bita_13.sum_lutc_input = "cin",
		counter_comb_bita_13.lpm_type = "cycloneii_lcell_comb";
	cycloneii_lcell_comb   counter_comb_bita_14
	( 
	.cin(wire_counter_comb_bita_13cout[0:0]),
	.combout(wire_counter_comb_bita_14combout[0:0]),
	.cout(wire_counter_comb_bita_14cout[0:0]),
	.dataa(wire_counter_reg_bit1a_regout[14:14]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_14.lut_mask = 16'h5A90,
		counter_comb_bita_14.sum_lutc_input = "cin",
		counter_comb_bita_14.lpm_type = "cycloneii_lcell_comb";
	cycloneii_lcell_comb   counter_comb_bita_15
	( 
	.cin(wire_counter_comb_bita_14cout[0:0]),
	.combout(wire_counter_comb_bita_15combout[0:0]),
	.cout(wire_counter_comb_bita_15cout[0:0]),
	.dataa(wire_counter_reg_bit1a_regout[15:15]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_15.lut_mask = 16'h5A90,
		counter_comb_bita_15.sum_lutc_input = "cin",
		counter_comb_bita_15.lpm_type = "cycloneii_lcell_comb";
	cycloneii_lcell_comb   counter_comb_bita_16
	( 
	.cin(wire_counter_comb_bita_15cout[0:0]),
	.combout(wire_counter_comb_bita_16combout[0:0]),
	.cout(wire_counter_comb_bita_16cout[0:0]),
	.dataa(wire_counter_reg_bit1a_regout[16:16]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_16.lut_mask = 16'h5A90,
		counter_comb_bita_16.sum_lutc_input = "cin",
		counter_comb_bita_16.lpm_type = "cycloneii_lcell_comb";
	cycloneii_lcell_comb   counter_comb_bita_17
	( 
	.cin(wire_counter_comb_bita_16cout[0:0]),
	.combout(wire_counter_comb_bita_17combout[0:0]),
	.cout(wire_counter_comb_bita_17cout[0:0]),
	.dataa(wire_counter_reg_bit1a_regout[17:17]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_17.lut_mask = 16'h5A90,
		counter_comb_bita_17.sum_lutc_input = "cin",
		counter_comb_bita_17.lpm_type = "cycloneii_lcell_comb";
	cycloneii_lcell_comb   counter_comb_bita_18
	( 
	.cin(wire_counter_comb_bita_17cout[0:0]),
	.combout(wire_counter_comb_bita_18combout[0:0]),
	.cout(wire_counter_comb_bita_18cout[0:0]),
	.dataa(wire_counter_reg_bit1a_regout[18:18]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_18.lut_mask = 16'h5A90,
		counter_comb_bita_18.sum_lutc_input = "cin",
		counter_comb_bita_18.lpm_type = "cycloneii_lcell_comb";
	cycloneii_lcell_comb   counter_comb_bita_19
	( 
	.cin(wire_counter_comb_bita_18cout[0:0]),
	.combout(wire_counter_comb_bita_19combout[0:0]),
	.cout(wire_counter_comb_bita_19cout[0:0]),
	.dataa(wire_counter_reg_bit1a_regout[19:19]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_19.lut_mask = 16'h5A90,
		counter_comb_bita_19.sum_lutc_input = "cin",
		counter_comb_bita_19.lpm_type = "cycloneii_lcell_comb";
	cycloneii_lcell_comb   counter_comb_bita_20
	( 
	.cin(wire_counter_comb_bita_19cout[0:0]),
	.combout(wire_counter_comb_bita_20combout[0:0]),
	.cout(wire_counter_comb_bita_20cout[0:0]),
	.dataa(wire_counter_reg_bit1a_regout[20:20]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_20.lut_mask = 16'h5A90,
		counter_comb_bita_20.sum_lutc_input = "cin",
		counter_comb_bita_20.lpm_type = "cycloneii_lcell_comb";
	cycloneii_lcell_comb   counter_comb_bita_21
	( 
	.cin(wire_counter_comb_bita_20cout[0:0]),
	.combout(wire_counter_comb_bita_21combout[0:0]),
	.cout(wire_counter_comb_bita_21cout[0:0]),
	.dataa(wire_counter_reg_bit1a_regout[21:21]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_21.lut_mask = 16'h5A90,
		counter_comb_bita_21.sum_lutc_input = "cin",
		counter_comb_bita_21.lpm_type = "cycloneii_lcell_comb";
	cycloneii_lcell_comb   counter_comb_bita_22
	( 
	.cin(wire_counter_comb_bita_21cout[0:0]),
	.combout(wire_counter_comb_bita_22combout[0:0]),
	.cout(wire_counter_comb_bita_22cout[0:0]),
	.dataa(wire_counter_reg_bit1a_regout[22:22]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_22.lut_mask = 16'h5A90,
		counter_comb_bita_22.sum_lutc_input = "cin",
		counter_comb_bita_22.lpm_type = "cycloneii_lcell_comb";
	cycloneii_lcell_comb   counter_comb_bita_23
	( 
	.cin(wire_counter_comb_bita_22cout[0:0]),
	.combout(wire_counter_comb_bita_23combout[0:0]),
	.cout(wire_counter_comb_bita_23cout[0:0]),
	.dataa(wire_counter_reg_bit1a_regout[23:23]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_23.lut_mask = 16'h5A90,
		counter_comb_bita_23.sum_lutc_input = "cin",
		counter_comb_bita_23.lpm_type = "cycloneii_lcell_comb";
	cycloneii_lcell_comb   counter_comb_bita_24
	( 
	.cin(wire_counter_comb_bita_23cout[0:0]),
	.combout(wire_counter_comb_bita_24combout[0:0]),
	.cout(wire_counter_comb_bita_24cout[0:0]),
	.dataa(wire_counter_reg_bit1a_regout[24:24]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_24.lut_mask = 16'h5A90,
		counter_comb_bita_24.sum_lutc_input = "cin",
		counter_comb_bita_24.lpm_type = "cycloneii_lcell_comb";
	cycloneii_lcell_comb   counter_comb_bita_25
	( 
	.cin(wire_counter_comb_bita_24cout[0:0]),
	.combout(wire_counter_comb_bita_25combout[0:0]),
	.cout(wire_counter_comb_bita_25cout[0:0]),
	.dataa(wire_counter_reg_bit1a_regout[25:25]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_25.lut_mask = 16'h5A90,
		counter_comb_bita_25.sum_lutc_input = "cin",
		counter_comb_bita_25.lpm_type = "cycloneii_lcell_comb";
	cycloneii_lcell_comb   counter_comb_bita_26
	( 
	.cin(wire_counter_comb_bita_25cout[0:0]),
	.combout(wire_counter_comb_bita_26combout[0:0]),
	.cout(wire_counter_comb_bita_26cout[0:0]),
	.dataa(wire_counter_reg_bit1a_regout[26:26]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_26.lut_mask = 16'h5A90,
		counter_comb_bita_26.sum_lutc_input = "cin",
		counter_comb_bita_26.lpm_type = "cycloneii_lcell_comb";
	cycloneii_lcell_comb   counter_comb_bita_27
	( 
	.cin(wire_counter_comb_bita_26cout[0:0]),
	.combout(wire_counter_comb_bita_27combout[0:0]),
	.cout(wire_counter_comb_bita_27cout[0:0]),
	.dataa(wire_counter_reg_bit1a_regout[27:27]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_27.lut_mask = 16'h5A90,
		counter_comb_bita_27.sum_lutc_input = "cin",
		counter_comb_bita_27.lpm_type = "cycloneii_lcell_comb";
	cycloneii_lcell_comb   counter_comb_bita_28
	( 
	.cin(wire_counter_comb_bita_27cout[0:0]),
	.combout(wire_counter_comb_bita_28combout[0:0]),
	.cout(wire_counter_comb_bita_28cout[0:0]),
	.dataa(wire_counter_reg_bit1a_regout[28:28]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_28.lut_mask = 16'h5A90,
		counter_comb_bita_28.sum_lutc_input = "cin",
		counter_comb_bita_28.lpm_type = "cycloneii_lcell_comb";
	cycloneii_lcell_comb   counter_comb_bita_29
	( 
	.cin(wire_counter_comb_bita_28cout[0:0]),
	.combout(wire_counter_comb_bita_29combout[0:0]),
	.cout(wire_counter_comb_bita_29cout[0:0]),
	.dataa(wire_counter_reg_bit1a_regout[29:29]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_29.lut_mask = 16'h5A90,
		counter_comb_bita_29.sum_lutc_input = "cin",
		counter_comb_bita_29.lpm_type = "cycloneii_lcell_comb";
	cycloneii_lcell_comb   counter_comb_bita_30
	( 
	.cin(wire_counter_comb_bita_29cout[0:0]),
	.combout(wire_counter_comb_bita_30combout[0:0]),
	.cout(wire_counter_comb_bita_30cout[0:0]),
	.dataa(wire_counter_reg_bit1a_regout[30:30]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_30.lut_mask = 16'h5A90,
		counter_comb_bita_30.sum_lutc_input = "cin",
		counter_comb_bita_30.lpm_type = "cycloneii_lcell_comb";
	cycloneii_lcell_ff   counter_reg_bit1a_0
	( 
	.aclr(aclr_actual),
	.clk(clock),
	.datain(wire_counter_comb_bita_0combout[0:0]),
	.ena((clk_en & (((sclr | sset) | sload) | cnt_en))),
	.regout(wire_counter_reg_bit1a_regout[0:0]),
	.sdata(wire_counter_reg_bit1a_sdata[0:0]),
	.sload((((sclr | sset) | sload) | modulus_trigger)),
	.sclr(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	cycloneii_lcell_ff   counter_reg_bit1a_1
	( 
	.aclr(aclr_actual),
	.clk(clock),
	.datain(wire_counter_comb_bita_1combout[0:0]),
	.ena((clk_en & (((sclr | sset) | sload) | cnt_en))),
	.regout(wire_counter_reg_bit1a_regout[1:1]),
	.sdata(wire_counter_reg_bit1a_sdata[1:1]),
	.sload((((sclr | sset) | sload) | modulus_trigger)),
	.sclr(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	cycloneii_lcell_ff   counter_reg_bit1a_2
	( 
	.aclr(aclr_actual),
	.clk(clock),
	.datain(wire_counter_comb_bita_2combout[0:0]),
	.ena((clk_en & (((sclr | sset) | sload) | cnt_en))),
	.regout(wire_counter_reg_bit1a_regout[2:2]),
	.sdata(wire_counter_reg_bit1a_sdata[2:2]),
	.sload((((sclr | sset) | sload) | modulus_trigger)),
	.sclr(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	cycloneii_lcell_ff   counter_reg_bit1a_3
	( 
	.aclr(aclr_actual),
	.clk(clock),
	.datain(wire_counter_comb_bita_3combout[0:0]),
	.ena((clk_en & (((sclr | sset) | sload) | cnt_en))),
	.regout(wire_counter_reg_bit1a_regout[3:3]),
	.sdata(wire_counter_reg_bit1a_sdata[3:3]),
	.sload((((sclr | sset) | sload) | modulus_trigger)),
	.sclr(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	cycloneii_lcell_ff   counter_reg_bit1a_4
	( 
	.aclr(aclr_actual),
	.clk(clock),
	.datain(wire_counter_comb_bita_4combout[0:0]),
	.ena((clk_en & (((sclr | sset) | sload) | cnt_en))),
	.regout(wire_counter_reg_bit1a_regout[4:4]),
	.sdata(wire_counter_reg_bit1a_sdata[4:4]),
	.sload((((sclr | sset) | sload) | modulus_trigger)),
	.sclr(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	cycloneii_lcell_ff   counter_reg_bit1a_5
	( 
	.aclr(aclr_actual),
	.clk(clock),
	.datain(wire_counter_comb_bita_5combout[0:0]),
	.ena((clk_en & (((sclr | sset) | sload) | cnt_en))),
	.regout(wire_counter_reg_bit1a_regout[5:5]),
	.sdata(wire_counter_reg_bit1a_sdata[5:5]),
	.sload((((sclr | sset) | sload) | modulus_trigger)),
	.sclr(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	cycloneii_lcell_ff   counter_reg_bit1a_6
	( 
	.aclr(aclr_actual),
	.clk(clock),
	.datain(wire_counter_comb_bita_6combout[0:0]),
	.ena((clk_en & (((sclr | sset) | sload) | cnt_en))),
	.regout(wire_counter_reg_bit1a_regout[6:6]),
	.sdata(wire_counter_reg_bit1a_sdata[6:6]),
	.sload((((sclr | sset) | sload) | modulus_trigger)),
	.sclr(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	cycloneii_lcell_ff   counter_reg_bit1a_7
	( 
	.aclr(aclr_actual),
	.clk(clock),
	.datain(wire_counter_comb_bita_7combout[0:0]),
	.ena((clk_en & (((sclr | sset) | sload) | cnt_en))),
	.regout(wire_counter_reg_bit1a_regout[7:7]),
	.sdata(wire_counter_reg_bit1a_sdata[7:7]),
	.sload((((sclr | sset) | sload) | modulus_trigger)),
	.sclr(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	cycloneii_lcell_ff   counter_reg_bit1a_8
	( 
	.aclr(aclr_actual),
	.clk(clock),
	.datain(wire_counter_comb_bita_8combout[0:0]),
	.ena((clk_en & (((sclr | sset) | sload) | cnt_en))),
	.regout(wire_counter_reg_bit1a_regout[8:8]),
	.sdata(wire_counter_reg_bit1a_sdata[8:8]),
	.sload((((sclr | sset) | sload) | modulus_trigger)),
	.sclr(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	cycloneii_lcell_ff   counter_reg_bit1a_9
	( 
	.aclr(aclr_actual),
	.clk(clock),
	.datain(wire_counter_comb_bita_9combout[0:0]),
	.ena((clk_en & (((sclr | sset) | sload) | cnt_en))),
	.regout(wire_counter_reg_bit1a_regout[9:9]),
	.sdata(wire_counter_reg_bit1a_sdata[9:9]),
	.sload((((sclr | sset) | sload) | modulus_trigger)),
	.sclr(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	cycloneii_lcell_ff   counter_reg_bit1a_10
	( 
	.aclr(aclr_actual),
	.clk(clock),
	.datain(wire_counter_comb_bita_10combout[0:0]),
	.ena((clk_en & (((sclr | sset) | sload) | cnt_en))),
	.regout(wire_counter_reg_bit1a_regout[10:10]),
	.sdata(wire_counter_reg_bit1a_sdata[10:10]),
	.sload((((sclr | sset) | sload) | modulus_trigger)),
	.sclr(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	cycloneii_lcell_ff   counter_reg_bit1a_11
	( 
	.aclr(aclr_actual),
	.clk(clock),
	.datain(wire_counter_comb_bita_11combout[0:0]),
	.ena((clk_en & (((sclr | sset) | sload) | cnt_en))),
	.regout(wire_counter_reg_bit1a_regout[11:11]),
	.sdata(wire_counter_reg_bit1a_sdata[11:11]),
	.sload((((sclr | sset) | sload) | modulus_trigger)),
	.sclr(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	cycloneii_lcell_ff   counter_reg_bit1a_12
	( 
	.aclr(aclr_actual),
	.clk(clock),
	.datain(wire_counter_comb_bita_12combout[0:0]),
	.ena((clk_en & (((sclr | sset) | sload) | cnt_en))),
	.regout(wire_counter_reg_bit1a_regout[12:12]),
	.sdata(wire_counter_reg_bit1a_sdata[12:12]),
	.sload((((sclr | sset) | sload) | modulus_trigger)),
	.sclr(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	cycloneii_lcell_ff   counter_reg_bit1a_13
	( 
	.aclr(aclr_actual),
	.clk(clock),
	.datain(wire_counter_comb_bita_13combout[0:0]),
	.ena((clk_en & (((sclr | sset) | sload) | cnt_en))),
	.regout(wire_counter_reg_bit1a_regout[13:13]),
	.sdata(wire_counter_reg_bit1a_sdata[13:13]),
	.sload((((sclr | sset) | sload) | modulus_trigger)),
	.sclr(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	cycloneii_lcell_ff   counter_reg_bit1a_14
	( 
	.aclr(aclr_actual),
	.clk(clock),
	.datain(wire_counter_comb_bita_14combout[0:0]),
	.ena((clk_en & (((sclr | sset) | sload) | cnt_en))),
	.regout(wire_counter_reg_bit1a_regout[14:14]),
	.sdata(wire_counter_reg_bit1a_sdata[14:14]),
	.sload((((sclr | sset) | sload) | modulus_trigger)),
	.sclr(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	cycloneii_lcell_ff   counter_reg_bit1a_15
	( 
	.aclr(aclr_actual),
	.clk(clock),
	.datain(wire_counter_comb_bita_15combout[0:0]),
	.ena((clk_en & (((sclr | sset) | sload) | cnt_en))),
	.regout(wire_counter_reg_bit1a_regout[15:15]),
	.sdata(wire_counter_reg_bit1a_sdata[15:15]),
	.sload((((sclr | sset) | sload) | modulus_trigger)),
	.sclr(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	cycloneii_lcell_ff   counter_reg_bit1a_16
	( 
	.aclr(aclr_actual),
	.clk(clock),
	.datain(wire_counter_comb_bita_16combout[0:0]),
	.ena((clk_en & (((sclr | sset) | sload) | cnt_en))),
	.regout(wire_counter_reg_bit1a_regout[16:16]),
	.sdata(wire_counter_reg_bit1a_sdata[16:16]),
	.sload((((sclr | sset) | sload) | modulus_trigger)),
	.sclr(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	cycloneii_lcell_ff   counter_reg_bit1a_17
	( 
	.aclr(aclr_actual),
	.clk(clock),
	.datain(wire_counter_comb_bita_17combout[0:0]),
	.ena((clk_en & (((sclr | sset) | sload) | cnt_en))),
	.regout(wire_counter_reg_bit1a_regout[17:17]),
	.sdata(wire_counter_reg_bit1a_sdata[17:17]),
	.sload((((sclr | sset) | sload) | modulus_trigger)),
	.sclr(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	cycloneii_lcell_ff   counter_reg_bit1a_18
	( 
	.aclr(aclr_actual),
	.clk(clock),
	.datain(wire_counter_comb_bita_18combout[0:0]),
	.ena((clk_en & (((sclr | sset) | sload) | cnt_en))),
	.regout(wire_counter_reg_bit1a_regout[18:18]),
	.sdata(wire_counter_reg_bit1a_sdata[18:18]),
	.sload((((sclr | sset) | sload) | modulus_trigger)),
	.sclr(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	cycloneii_lcell_ff   counter_reg_bit1a_19
	( 
	.aclr(aclr_actual),
	.clk(clock),
	.datain(wire_counter_comb_bita_19combout[0:0]),
	.ena((clk_en & (((sclr | sset) | sload) | cnt_en))),
	.regout(wire_counter_reg_bit1a_regout[19:19]),
	.sdata(wire_counter_reg_bit1a_sdata[19:19]),
	.sload((((sclr | sset) | sload) | modulus_trigger)),
	.sclr(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	cycloneii_lcell_ff   counter_reg_bit1a_20
	( 
	.aclr(aclr_actual),
	.clk(clock),
	.datain(wire_counter_comb_bita_20combout[0:0]),
	.ena((clk_en & (((sclr | sset) | sload) | cnt_en))),
	.regout(wire_counter_reg_bit1a_regout[20:20]),
	.sdata(wire_counter_reg_bit1a_sdata[20:20]),
	.sload((((sclr | sset) | sload) | modulus_trigger)),
	.sclr(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	cycloneii_lcell_ff   counter_reg_bit1a_21
	( 
	.aclr(aclr_actual),
	.clk(clock),
	.datain(wire_counter_comb_bita_21combout[0:0]),
	.ena((clk_en & (((sclr | sset) | sload) | cnt_en))),
	.regout(wire_counter_reg_bit1a_regout[21:21]),
	.sdata(wire_counter_reg_bit1a_sdata[21:21]),
	.sload((((sclr | sset) | sload) | modulus_trigger)),
	.sclr(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	cycloneii_lcell_ff   counter_reg_bit1a_22
	( 
	.aclr(aclr_actual),
	.clk(clock),
	.datain(wire_counter_comb_bita_22combout[0:0]),
	.ena((clk_en & (((sclr | sset) | sload) | cnt_en))),
	.regout(wire_counter_reg_bit1a_regout[22:22]),
	.sdata(wire_counter_reg_bit1a_sdata[22:22]),
	.sload((((sclr | sset) | sload) | modulus_trigger)),
	.sclr(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	cycloneii_lcell_ff   counter_reg_bit1a_23
	( 
	.aclr(aclr_actual),
	.clk(clock),
	.datain(wire_counter_comb_bita_23combout[0:0]),
	.ena((clk_en & (((sclr | sset) | sload) | cnt_en))),
	.regout(wire_counter_reg_bit1a_regout[23:23]),
	.sdata(wire_counter_reg_bit1a_sdata[23:23]),
	.sload((((sclr | sset) | sload) | modulus_trigger)),
	.sclr(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	cycloneii_lcell_ff   counter_reg_bit1a_24
	( 
	.aclr(aclr_actual),
	.clk(clock),
	.datain(wire_counter_comb_bita_24combout[0:0]),
	.ena((clk_en & (((sclr | sset) | sload) | cnt_en))),
	.regout(wire_counter_reg_bit1a_regout[24:24]),
	.sdata(wire_counter_reg_bit1a_sdata[24:24]),
	.sload((((sclr | sset) | sload) | modulus_trigger)),
	.sclr(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	cycloneii_lcell_ff   counter_reg_bit1a_25
	( 
	.aclr(aclr_actual),
	.clk(clock),
	.datain(wire_counter_comb_bita_25combout[0:0]),
	.ena((clk_en & (((sclr | sset) | sload) | cnt_en))),
	.regout(wire_counter_reg_bit1a_regout[25:25]),
	.sdata(wire_counter_reg_bit1a_sdata[25:25]),
	.sload((((sclr | sset) | sload) | modulus_trigger)),
	.sclr(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	cycloneii_lcell_ff   counter_reg_bit1a_26
	( 
	.aclr(aclr_actual),
	.clk(clock),
	.datain(wire_counter_comb_bita_26combout[0:0]),
	.ena((clk_en & (((sclr | sset) | sload) | cnt_en))),
	.regout(wire_counter_reg_bit1a_regout[26:26]),
	.sdata(wire_counter_reg_bit1a_sdata[26:26]),
	.sload((((sclr | sset) | sload) | modulus_trigger)),
	.sclr(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	cycloneii_lcell_ff   counter_reg_bit1a_27
	( 
	.aclr(aclr_actual),
	.clk(clock),
	.datain(wire_counter_comb_bita_27combout[0:0]),
	.ena((clk_en & (((sclr | sset) | sload) | cnt_en))),
	.regout(wire_counter_reg_bit1a_regout[27:27]),
	.sdata(wire_counter_reg_bit1a_sdata[27:27]),
	.sload((((sclr | sset) | sload) | modulus_trigger)),
	.sclr(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	cycloneii_lcell_ff   counter_reg_bit1a_28
	( 
	.aclr(aclr_actual),
	.clk(clock),
	.datain(wire_counter_comb_bita_28combout[0:0]),
	.ena((clk_en & (((sclr | sset) | sload) | cnt_en))),
	.regout(wire_counter_reg_bit1a_regout[28:28]),
	.sdata(wire_counter_reg_bit1a_sdata[28:28]),
	.sload((((sclr | sset) | sload) | modulus_trigger)),
	.sclr(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	cycloneii_lcell_ff   counter_reg_bit1a_29
	( 
	.aclr(aclr_actual),
	.clk(clock),
	.datain(wire_counter_comb_bita_29combout[0:0]),
	.ena((clk_en & (((sclr | sset) | sload) | cnt_en))),
	.regout(wire_counter_reg_bit1a_regout[29:29]),
	.sdata(wire_counter_reg_bit1a_sdata[29:29]),
	.sload((((sclr | sset) | sload) | modulus_trigger)),
	.sclr(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	cycloneii_lcell_ff   counter_reg_bit1a_30
	( 
	.aclr(aclr_actual),
	.clk(clock),
	.datain(wire_counter_comb_bita_30combout[0:0]),
	.ena((clk_en & (((sclr | sset) | sload) | cnt_en))),
	.regout(wire_counter_reg_bit1a_regout[30:30]),
	.sdata(wire_counter_reg_bit1a_sdata[30:30]),
	.sload((((sclr | sset) | sload) | modulus_trigger)),
	.sclr(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	assign
		wire_counter_reg_bit1a_sdata = ({31{(~ sclr)}} & (({31{sset}} & s_val) | ({31{(~ sset)}} & (({31{sload}} & data) | (({31{(~ sload)}} & modulus_bus) & {31{(~ updown_dir)}})))));
	clk_counter_cmpr   cmpr2
	( 
	.aeb(wire_cmpr2_aeb),
	.dataa(safe_q),
	.datab(modulus_bus));
	assign
		aclr_actual = 1'b0,
		cnt_en = 1'b1,
		compare_result = wire_cmpr2_aeb,
		cout_actual = (wire_counter_comb_bita_30cout[0:0] | (time_to_clear & updown_dir)),
		data = {31{1'b0}},
		external_cin = 1'b1,
		modulus_bus = 31'b0000001011111010111100000111111,
		modulus_trigger = cout_actual,
		q = safe_q,
		s_val = {31{1'b1}},
		safe_q = wire_counter_reg_bit1a_regout,
		sload = 1'b0,
		sset = 1'b0,
		time_to_clear = compare_result,
		updown_dir = 1'b1;
endmodule //clk_counter_cntr
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module clk_counter (
	clk_en,
	clock,
	sclr,
	q)/* synthesis synthesis_clearbox = 1 */;

	input	  clk_en;
	input	  clock;
	input	  sclr;
	output	[30:0]  q;

	wire [30:0] sub_wire0;
	wire [30:0] q = sub_wire0[30:0];

	clk_counter_cntr	clk_counter_cntr_component (
				.clk_en (clk_en),
				.sclr (sclr),
				.clock (clock),
				.q (sub_wire0));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: ACLR NUMERIC "0"
// Retrieval info: PRIVATE: ALOAD NUMERIC "0"
// Retrieval info: PRIVATE: ASET NUMERIC "0"
// Retrieval info: PRIVATE: ASET_ALL1 NUMERIC "1"
// Retrieval info: PRIVATE: CLK_EN NUMERIC "1"
// Retrieval info: PRIVATE: CNT_EN NUMERIC "0"
// Retrieval info: PRIVATE: CarryIn NUMERIC "0"
// Retrieval info: PRIVATE: CarryOut NUMERIC "0"
// Retrieval info: PRIVATE: Direction NUMERIC "0"
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Cyclone II"
// Retrieval info: PRIVATE: ModulusCounter NUMERIC "1"
// Retrieval info: PRIVATE: ModulusValue NUMERIC "25000000"
// Retrieval info: PRIVATE: SCLR NUMERIC "1"
// Retrieval info: PRIVATE: SLOAD NUMERIC "0"
// Retrieval info: PRIVATE: SSET NUMERIC "0"
// Retrieval info: PRIVATE: SSET_ALL1 NUMERIC "1"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "1"
// Retrieval info: PRIVATE: nBit NUMERIC "31"
// Retrieval info: CONSTANT: LPM_DIRECTION STRING "UP"
// Retrieval info: CONSTANT: LPM_MODULUS NUMERIC "25000000"
// Retrieval info: CONSTANT: LPM_PORT_UPDOWN STRING "PORT_UNUSED"
// Retrieval info: CONSTANT: LPM_TYPE STRING "LPM_COUNTER"
// Retrieval info: CONSTANT: LPM_WIDTH NUMERIC "31"
// Retrieval info: USED_PORT: clk_en 0 0 0 0 INPUT NODEFVAL clk_en
// Retrieval info: USED_PORT: clock 0 0 0 0 INPUT NODEFVAL clock
// Retrieval info: USED_PORT: q 0 0 31 0 OUTPUT NODEFVAL q[30..0]
// Retrieval info: USED_PORT: sclr 0 0 0 0 INPUT NODEFVAL sclr
// Retrieval info: CONNECT: @clock 0 0 0 0 clock 0 0 0 0
// Retrieval info: CONNECT: q 0 0 31 0 @q 0 0 31 0
// Retrieval info: CONNECT: @clk_en 0 0 0 0 clk_en 0 0 0 0
// Retrieval info: CONNECT: @sclr 0 0 0 0 sclr 0 0 0 0
// Retrieval info: LIBRARY: lpm lpm.lpm_components.all
// Retrieval info: GEN_FILE: TYPE_NORMAL clk_counter.vhd TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL clk_counter.inc FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL clk_counter.cmp FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL clk_counter.bsf TRUE FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL clk_counter_inst.vhd FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL clk_counter_waveforms.html TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL clk_counter_wave*.jpg FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL clk_counter_syn.v TRUE
// Retrieval info: LIB_FILE: lpm
